{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ant\\xF3nio\\\\Desktop\\\\Engenharia Inform\\xE1tica\\\\TI2-React\\\\React\\\\revofgames-react\\\\src\\\\App.js\";\n// *****************************************\n// App.js\n// *****************************************\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // importar componentes\n\nimport Tabela from './Tabela';\nimport Formulario from './Formulario';\n/**\n * Função que irá ler os dados (jogos) da API\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function getJogos() {\n  // ler os dados da API\n  // https://create-react-app.dev/docs/proxying-api-requests-in-development/\n  let resposta = await fetch(\"api/JogosAPI\");\n\n  if (!resposta.ok) {\n    // não foi recebido o código 200 do HTTP\n    console.error(\"Não conseguimos ler os dados da API. Código: \" + resposta.status);\n  }\n\n  return await resposta.json();\n}\n/**\n * invoca a API e envia os dados do novo Jogo\n * @param {} dadosNovoJogo \n */\n\n\nasync function adicionaJogo(dadosNovoJogo) {\n  let formData = new FormData();\n  formData.append(\"Nome\", dadosNovoJogo.Jogo);\n  formData.append(\"UpFotografia\", dadosNovoJogo.UpFotografia);\n  formData.append(\"Nota\", dadosNovoJogo.NotaJogo);\n  formData.append(\"Descricao\", dadosNovoJogo.DescJogo);\n  let resposta = await fetch(\"api/JogosAPI\", {\n    method: \"POST\",\n    body: formData\n  }); //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo jogo. Código= ' + resposta.status);\n  } //Devolver os dados a seres usados na componente\n\n\n  return await resposta.json();\n}\n/**\n * invoca a api para apagar o jogo selecionado\n * @param {*} dadosjogoremover \n * @returns \n */\n\n\nasync function removeJogo(dadosjogoremover) {\n  let formData = new FormData();\n  formData.append(\"IdJogo\", dadosjogoremover.IdJogo);\n  let resposta = await fetch(\"api/JogosAPI/\" + dadosjogoremover.idJogo, {\n    method: \"DELETE\",\n    body: formData\n  }); //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n\n  if (!resposta.ok) {\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo jogo. Código= ' + resposta.status);\n  } //Devolver os dados a seres usados na componente\n\n\n  return await resposta.json();\n}\n/**\n * Componente principal do meu projeto\n */\n\n\nclass App extends React.Component {\n  /**\n   * Construtor da classe -> tem sempre este nome\n   */\n  constructor(props) {\n    super(props); // <--- esta É SEMPRE a primeira instrução\n\n    this.handlerRemoveForm = async idJogo => {\n      /**\n       * Tarefas:\n       * 1 - preparar os dados para serem enviados para a API\n       * 2 - enviar os dados para a API\n       * 3 - efetuar o reload da tabela \n       */\n\n      /**\n      * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n      */\n      try {\n        //Ponto 2\n        await removeJogo(idJogo); //Ponto 3\n\n        await this.LoadJogos();\n      } catch (erro) {\n        this.setState({\n          errorMessage: erro.toString()\n        });\n        console.error(\"Erro ao submeter os dados do novo Jogo; \", erro);\n      }\n\n      window.location.reload(); // //recuperar os jogos que estão representados na tabela \n      // const {jogos} = this.state\n      // //alterar essa lista, retirando dela o jogo identificado pelo 'index'\n      // this.setState({\n      //   //filter é um método do 'state' que permite aplicar um filtro sobre os\n      //   //dados do state \n      //   jogos:jogos.filter((jogo,i)=>{\n      //     //devolve todos os dados que não forem iguais ao index\n      //     return i !== idJogo\n      //   }),\n      // });\n    };\n\n    this.handlerDadosForm = async dadosdoFormulario => {\n      /**\n       * Tarefas:\n       * 1 - preparar os dados para serem enviados para a API\n       * 2 - enviar os dados para a API\n       * 3 - efetuar o reload da tabela \n       */\n\n      /**\n       * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n       */\n      try {\n        //Ponto 2\n        await adicionaJogo(dadosdoFormulario); //Ponto 3\n\n        await this.LoadJogos();\n      } catch (erro) {\n        this.setState({\n          errorMessage: erro.toString()\n        });\n        console.error(\"Erro ao submeter os dados do novo Jogo; \", erro);\n      }\n\n      window.location.reload();\n    };\n\n    this.state = {\n      /**\n       * array que irá conter os dados dos Jogos, vindas da API\n       */\n      jogos: [],\n\n      /**\n       * variável para conter o 'estado' da app, \n       * no carregamento dos dados dos Jogos, da API\n       * @type{\"carregando dados\" | \"sucesso\" | \"erro\"}\n       */\n      loadState: \"\",\n\n      /**\n       * guarda a mensagem de erro, se algo correr mal\n       */\n      errorMessage: null\n    };\n  }\n  /**\n   * Quando o objeto é criado, executa o código aqui escrito\n   * Vamos usá-lo para carregar os dados da API\n   */\n\n\n  componentDidMount() {\n    this.LoadJogos();\n  }\n  /**\n   * Carrega os dados dos jogos da API e adiciona-os ao array 'jogos'\n   */\n\n\n  async LoadJogos() {\n    /* Tarefas:\n     *   1. Ler os dados da API (fetch)\n         2. atualizar os dados na var. state\n     */\n    try {\n      // 1.\n      this.setState({\n        loadState: \"carregando dados\"\n      });\n      let JogosVindosDaAPI = await getJogos(); // 2.\n      // esta não é a forma correta: this.state.jogos = JogosVindosDaAPI;\n\n      this.setState({\n        jogos: JogosVindosDaAPI,\n        loadState: \"sucesso\"\n      });\n    } catch (erro) {\n      this.setState({\n        loadState: \"erro\",\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro na leitura dos jogos da API\", erro);\n    }\n  }\n  /**\n   * método que sabe identificar o 'jogo' que deverá ser retirado da tabela\n   * @param {*} idJogo - dados do jogo a remover\n   */\n\n\n  render() {\n    var _ref;\n\n    //recuperar os dados do 'state' para usar dentro deste método\n    const {\n      jogos\n    } = this.state; //determinar o comportamento do 'componente', \n    //em função do seu estado\n\n    switch (this.state.loadState) {\n      case \"carregando dados\":\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A carregar os dados. Aguarde, por favor.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 16\n        }, this);\n\n      case \"erro\":\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ocorreu um erro: \", (_ref = this.state.errorMessage + '.') !== null && _ref !== void 0 ? _ref : \"Não sabemos qual\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 16\n        }, this);\n\n      case \"sucesso\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(Formulario, {\n            outDadosJogos: this.handlerDadosForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tabela, {\n            dadosJogos: jogos,\n            jogo: this.handlerRemoveForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/António/Desktop/Engenharia Informática/TI2-React/React/revofgames-react/src/App.js"],"names":["React","Tabela","Formulario","getJogos","resposta","fetch","ok","console","error","status","json","adicionaJogo","dadosNovoJogo","formData","FormData","append","Jogo","UpFotografia","NotaJogo","DescJogo","method","body","Error","removeJogo","dadosjogoremover","IdJogo","idJogo","App","Component","constructor","props","handlerRemoveForm","LoadJogos","erro","setState","errorMessage","toString","window","location","reload","handlerDadosForm","dadosdoFormulario","state","jogos","loadState","componentDidMount","JogosVindosDaAPI","render"],"mappings":"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","sourcesContent":["// *****************************************\n// App.js\n// *****************************************\n\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// importar componentes\nimport Tabela from './Tabela';\nimport Formulario from './Formulario';\n\n/**\n * Função que irá ler os dados (jogos) da API\n */\nasync function getJogos() {\n\n  // ler os dados da API\n  // https://create-react-app.dev/docs/proxying-api-requests-in-development/\n  let resposta = await fetch(\"api/JogosAPI\");\n\n  if (!resposta.ok) {\n    // não foi recebido o código 200 do HTTP\n    console.error(\"Não conseguimos ler os dados da API. Código: \" + resposta.status);\n  }\n  return await resposta.json();\n}\n\n/**\n * invoca a API e envia os dados do novo Jogo\n * @param {} dadosNovoJogo \n */\nasync function adicionaJogo(dadosNovoJogo){\n  let formData = new FormData();\n  formData.append(\"Nome\", dadosNovoJogo.Jogo);\n  formData.append(\"UpFotografia\", dadosNovoJogo.UpFotografia);\n  formData.append(\"Nota\", dadosNovoJogo.NotaJogo);\n  formData.append(\"Descricao\", dadosNovoJogo.DescJogo);\n\n  let resposta = await fetch(\"api/JogosAPI\", {\n    method: \"POST\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if(!resposta.ok){\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo jogo. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n}\n\n/**\n * invoca a api para apagar o jogo selecionado\n * @param {*} dadosjogoremover \n * @returns \n */\nasync function removeJogo(dadosjogoremover){\n  let formData = new FormData();\n  formData.append(\"IdJogo\", dadosjogoremover.IdJogo);\n\n  let resposta = await fetch(\"api/JogosAPI/\" + dadosjogoremover.idJogo , {\n    method: \"DELETE\",\n    body: formData\n  });\n\n  //verifica se os dados não foram enviados para a API mostra a mensagem de erro juntamente com o estado da resposta\n  if(!resposta.ok){\n    console.error(resposta);\n    throw new Error('Não foi possível enviar os dados do novo jogo. Código= ' + resposta.status);\n  }\n\n  //Devolver os dados a seres usados na componente\n  return await resposta.json();\n\n}\n\n\n\n/**\n * Componente principal do meu projeto\n */\nclass App extends React.Component {\n  /**\n   * Construtor da classe -> tem sempre este nome\n   */\n  constructor(props) {\n    super(props); // <--- esta É SEMPRE a primeira instrução\n\n    this.state = {\n      /**\n       * array que irá conter os dados dos Jogos, vindas da API\n       */\n      jogos: [],\n      /**\n       * variável para conter o 'estado' da app, \n       * no carregamento dos dados dos Jogos, da API\n       * @type{\"carregando dados\" | \"sucesso\" | \"erro\"}\n       */\n      loadState:\"\",\n      /**\n       * guarda a mensagem de erro, se algo correr mal\n       */\n      errorMessage:null\n    }\n  }\n\n  /**\n   * Quando o objeto é criado, executa o código aqui escrito\n   * Vamos usá-lo para carregar os dados da API\n   */\n  componentDidMount() {\n    this.LoadJogos();\n  }\n\n  /**\n   * Carrega os dados dos jogos da API e adiciona-os ao array 'jogos'\n   */\n   async LoadJogos() {\n    /* Tarefas:\n     *   1. Ler os dados da API (fetch)\n         2. atualizar os dados na var. state\n     */\n    try {\n      // 1.\n      this.setState({loadState:\"carregando dados\"});\n      let JogosVindosDaAPI = await getJogos();\n\n      // 2.\n      // esta não é a forma correta: this.state.jogos = JogosVindosDaAPI;\n      this.setState({\n        jogos: JogosVindosDaAPI,\n        loadState:\"sucesso\"\n      });\n    } catch (erro) {\n      this.setState({\n        loadState:\"erro\",\n        errorMessage:erro.toString()\n      });\n      console.error(\"Erro na leitura dos jogos da API\", erro);\n    }\n  }\n\n  /**\n   * método que sabe identificar o 'jogo' que deverá ser retirado da tabela\n   * @param {*} idJogo - dados do jogo a remover\n   */\n   handlerRemoveForm = async (idJogo)=>{\n    /**\n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     */\n     /**\n     * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n     */\n      try{\n        //Ponto 2\n        await removeJogo(idJogo);\n  \n        //Ponto 3\n        await this.LoadJogos();\n      } catch(erro){\n        this.setState({\n          errorMessage: erro.toString()\n        });\n        console.error(\"Erro ao submeter os dados do novo Jogo; \", erro)\n      }\n      window.location.reload();\n    // //recuperar os jogos que estão representados na tabela \n    // const {jogos} = this.state\n    // //alterar essa lista, retirando dela o jogo identificado pelo 'index'\n    // this.setState({\n    //   //filter é um método do 'state' que permite aplicar um filtro sobre os\n    //   //dados do state \n    //   jogos:jogos.filter((jogo,i)=>{\n    //     //devolve todos os dados que não forem iguais ao index\n    //     return i !== idJogo\n    //   }),\n    // });\n  }\n\n  handlerDadosForm = async (dadosdoFormulario) => {\n    /**\n     * Tarefas:\n     * 1 - preparar os dados para serem enviados para a API\n     * 2 - enviar os dados para a API\n     * 3 - efetuar o reload da tabela \n     */\n    \n    /**\n     * 1 - já se encontra feito através do parâmetro de entrada -dadosdoFormulario- que já contém os daods formatados\n     */\n    try{\n      //Ponto 2\n      await adicionaJogo(dadosdoFormulario);\n\n      //Ponto 3\n      await this.LoadJogos();\n    } catch(erro){\n      this.setState({\n        errorMessage: erro.toString()\n      });\n      console.error(\"Erro ao submeter os dados do novo Jogo; \", erro)\n    }\n    window.location.reload();\n  }\n\n  render() {\n    //recuperar os dados do 'state' para usar dentro deste método\n    const { jogos } = this.state;\n    \n    //determinar o comportamento do 'componente', \n    //em função do seu estado\n    switch(this.state.loadState){\n      case \"carregando dados\": \n        return <p>A carregar os dados. Aguarde, por favor.</p>\n      case \"erro\":\n        return <p>Ocorreu um erro: {this.state.errorMessage +'.' ??\"Não sabemos qual\"}</p>\n      case \"sucesso\":\n        return (\n          <div className=\"container\">\n            {/* adição do Formulário que há-de recolher os dados do novo jogo */}\n            <Formulario outDadosJogos={this.handlerDadosForm}/>\n\n            {/* este componente - Tabela - irá apresentar os dados dos jogos no ecrã\n               os jogos devem ser lidas na API */}\n            <Tabela dadosJogos={jogos} jogo={this.handlerRemoveForm} />\n          </div>\n        )\n      default: return null;\n    }\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}